stopwatch()
library(tidyverse)
#13.4.6 #1-4
airports %>%
semi_join(flights, c("faa" = "dest")) %>%
ggplot(aes(lon, lat)) +
borders("state") +
geom_point() +
coord_quickmap()
library(nycflights13)
#13.4.6 #1-4
airports %>%
semi_join(flights, c("faa" = "dest")) %>%
ggplot(aes(lon, lat)) +
borders("state") +
geom_point() +
coord_quickmap()
library(maps)
library("datamodelr")
install.packages(maps)
install.packages("maps")
library(maps)
#13.4.6 #1-4
airports %>%
semi_join(flights, c("faa" = "dest")) %>%
ggplot(aes(lon, lat)) +
borders("state") +
geom_point() +
coord_quickmap()
avg_dest_delays <-
flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c(dest = "faa"))
View(avg_dest_delays)
airports
dest_delays %>%
ggplot(aes(lon, lat, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap()
dest_delays <-
flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c(dest = "faa"))
dest_delays %>%
ggplot(aes(lon, lat, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap()
dest_delays %>%
ggplot(aes(lon, lat)) +
borders("state") +
geom_point() +
coord_quickmap()
dest_delays <-
flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("faa" = "dest"))
dest_delays <-
flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c(dest = "faa"))
dest_delays %>%
ggplot(aes(lon, lat)) +
borders("state") +
geom_point() +
coord_quickmap()
airport_locations <- airports %>%
select(faa, lat, lon)
flights %>%
select(year:day, hour, origin, dest) %>%
left_join(
airport_locations,
by = c("origin" = "faa")
) %>%
left_join(
airport_locations,
by = c("dest" = "faa")
)
#3
flights %>%
mutate(tot_delay = arr_delay + dep_delay) %>%
group_by(tailnum) %>%
summarize(avg_delay = mean(tot_delay, na.rm = TRUE)) %>%
left_join(select(planes, tailnum, year), by = "tailnum") %>%
mutate(year = 2013 - year) %>%
ggplot(aes(avg_delay, year)) +
geom_point() +
geom_smooth()
#3
flights %>%
mutate(tot_delay = arr_delay + dep_delay) %>%
group_by(tailnum) %>%
summarize(avg_delay = mean(tot_delay, na.rm = TRUE)) %>%
left_join(select(planes, tailnum, year), by = "tailnum") %>%
mutate(year = 2013 - year) %>%
#3
flights %>%
mutate(tot_delay = arr_delay + dep_delay) %>%
group_by(tailnum) %>%
summarize(avg_delay = mean(tot_delay, na.rm = TRUE)) %>%
left_join(select(planes, tailnum, year), by = "tailnum") %>%
mutate(year = 2013 - year)
#3
planeAgeAndDelays <- flights %>%
mutate(tot_delay = arr_delay + dep_delay) %>%
group_by(tailnum) %>%
summarize(avg_delay = mean(tot_delay, na.rm = TRUE)) %>%
left_join(select(planes, tailnum, year), by = "tailnum") %>%
mutate(year = 2013 - year)
planeAgeAndDelays
#3
planeAgeAndDelays <- flights %>%
mutate(tot_delay = arr_delay + dep_delay) %>%
group_by(tailnum) %>%
summarize(avg_delay = mean(tot_delay, na.rm = TRUE)) %>%
left_join(select(planes, tailnum, year), by = "tailnum") %>%
mutate(year = 2013 - year) %>% arrange(desc(avg_delay))
planeAgeAndDelays
View(planeAgeAndDelays)
flight_weather %>%
group_by(precip) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(aes(x = precip, y = delay)) +
geom_line() + geom_point()
#4
flight_weather <-
flights %>%
inner_join(weather, by = c("origin" = "origin",
"year" = "year",
"month" = "month",
"day" = "day",
"hour" = "hour"))
flight_weather %>%
group_by(precip) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(aes(x = precip, y = delay)) +
geom_line() + geom_point()
weatherAndDelays <- flight_weather %>%
group_by(precip) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE))
weatherAndDelays
weatherAndDelays <- flight_weather %>%
group_by(precip) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE)) %>%
arrange(desc(delay))
weatherAndDelays
flights %>%
anti_join(planes, by = "tailnum") %>%
count(carrier, sort = TRUE)
#2
flights %>%
semi_join(count(flights, tailnum) %>% filter(n >= 100))
#3
top_ten_most_common <-
fueleconomy::common %>%
ungroup() %>%
arrange(-n) %>%
top_n(10, n)
fueleconomy
#3
fueleconomy::vehicles %>%
distinct(model, make) %>%
group_by(model) %>%
filter(n() > 1) %>%
arrange(model) %>%
head()
#3
library(fueleconomy)
library(tidyverse)
fueleconomy::vehicles %>%
distinct(model, make) %>%
group_by(model) %>%
filter(n() > 1) %>%
arrange(model) %>%
head()
library(fueleconomy)
library(fueleconomy)
library(fueleconomy)
library(fueleconomy)
install.packages("fueleconomy")
library(fueleconomy)
planeAgeAndDelays %>% ggplot(aes(age,avgDelay)) + geom_line()
planeAgeAndDelays %>% ggplot(aes(year,avgDelay)) + geom_line()
#3
planeAgeAndDelays <- flights %>%
mutate(tot_delay = arr_delay + dep_delay) %>%
group_by(tailnum) %>%
summarize(avg_delay = mean(tot_delay, na.rm = TRUE)) %>%
left_join(select(planes, tailnum, year), by = "tailnum") %>%
mutate(year = 2013 - year) %>% arrange(desc(avg_delay))
planeAgeAndDelays %>% ggplot(aes(year,avg_delay)) + geom_line()
weatherAndDelays  %>% ggplot(aes(year,avg_delay)) + geom_line()
weatherAndDelays  %>% ggplot(aes(precip,delay)) + geom_line()
head(fueleconomy::vehicles)
head(fueleconomy::common)
common_models <- semi_join(fueleconomy::common, fueleconomy::vehicles, c("make","model"))
common_models
fueleconomy::vehicles %>%
distinct(model, make) %>%
group_by(model) %>%
filter(n() > 1) %>%
arrange(model) %>%
head()
fueleconomy::common %>%
distinct(model, make) %>%
group_by(model) %>%
filter(n() > 1) %>%
arrange(model) %>%
head()
#4
fn <-
flights %>%
group_by(month, day) %>%
summarize(avg_delay = sum(arr_delay + dep_delay, na.rm = TRUE)) %>%
mutate(twoday_delay = avg_delay + lag(avg_delay)) %>%
arrange(-twoday_delay)
arrange(twoday_delay)
#4
fortyEight <-
flights %>%
group_by(month, day) %>%
summarize(avg_delay = sum(arr_delay + dep_delay, na.rm = TRUE)) %>%
mutate(twoday_delay = avg_delay + lag(avg_delay)) %>%
arrange(-twoday_delay)
weather_temp <-
weather %>%
group_by(month, day) %>%
summarize_at(vars(humid, precip, temp), mean, na.rm = TRUE)
arrange(twoday_delay)
fortyEight %>%
left_join(weather_temp) %>%
arrange(twoday_delay)
fortyEight %>%
left_join(weather_temp) %>% ggplot(aes(temp,twoday_delay)) + geom_line()
#1
gss_cat %>% count(rincome)
ggplot(gss_cat,aes(rincome)) + geom_bar()
#2
gss_cat %>%
count(relig) %>%
arrange(desc(n)) %>%
head(1)
gss_cat %>%
count(partyid) %>%
arrange(desc(n)) %>%
head(1)
#3
gss_cat %>%
filter(!denom %in% c("No answer", "Other", "Don't know", "Not applicable",
"No denomination")) %>%
count(relig)
gss_cat %>% count(relig,denom) %>% ggplot(aes(x=relig,y=denom,size=n)) + geom_point()
#15.4.1 #1-3
#1
summary(gss_cat[["tvhours"]])
gss_cat %>%
filter(!is.na(tvhours)) %>%
ggplot(aes(x = tvhours)) +
geom_histogram(binwidth = 1)
gss_cat %>%
filter(!is.na(tvhours)) %>%
ggplot(aes(x = tvhours)) + geom_histogram(binwidth = 1)
#2
#For each factor in gss_cat identify whether the order of the levels is arbitrary or principled.
head(gss_cat)
#So marital, race, rincome, partyid, relig, and denom are factors
levels(gss_cat$marital) #Seems arbitrary to me - there's no quantitative way to order these
?write.table
write.table(meanAndStdevCols, row.name = FALSE)
write.table(meanAndStdevCols,"/Users/grmcclure/OneDrive - Red Ventures/Documents/Projects/dsa/GCAD_Project/UCIHARDataset/test/filename.txt",sep="\t",row.names=FALSE)
getwd()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = 'blue')
abline(h=12)
hist(ppm, col = 'green')
rug(ppm)
low
high
hist(ppm, col = 'green', breaks equal <- 100)
hist(ppm, col = 'green', breaksequal <- 100)
hist(ppm, col = 'green', breaks = 100)
rug(ppm)
hist(ppm, col = 'green')
abline(v = 12, lwd = 2)
abline(v = median(ppm), lwd = 2)
abline(v = median(ppm), col = 'magenta', lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = 'wheat', main = 'Number of Counties in Each Region')
boxplot(pm25~region, data = pollution, col = 'red')
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, bool = 'east')
east <- subset(pollution, region == 'east')
head(east)
hist(east$pm25, col='green')
hist(subset(pollution, region == 'east')$pm25, col='green')
hist(subset(pollution, region == 'west')$pm25, col='green')
plot(pollution$latitude, pollution$pm25)
with(pollution, plot(latitude, pm25))
abline(v = 12, lwd = 2, lty = 2)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == 'west')
plot(west$latitude, west$pm25, main = 'West')
plot(east$latitude, east$pm25, main = 'East')
?Devices
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(pdf(file="myplot.pdf"))
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed,dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy,data = mpg)
head(airquality)
range(airquality$Ozone, na.rm == TRUE)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
dev.off()
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
par()
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Ozone and Wind in New York City")
title(main="Wind and Ozone in NYC")
may <- subset(airquality, months = 5)
may <- subset(airquality, Month = 5)
may <- subset(airquality, Month == 5)
points(wind,ozone,col = 'blue',pch = 'triangle')
points(airquality$Wind,airquality$Ozone,col = 'blue',pch = 'triangle')
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month != 5)
points(may$Wind,may$Ozone,col="red",pch=16)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch = c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v = 12, lwd = 2, lty = 2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow = c(1,2))
plot(airquality$Wind,airquality$Ozone)
plot(airquality$Wind,airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind,airquality$Ozone,title(main = "Ozone and Wind"))
plot(airquality$Wind,airquality$Ozone,main = "Ozone and Wind")
plot(airquality$Solar.R,airquality$Ozone,main = "Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone,main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(tidyverse)
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", na.strings = "?")
data <- read.table("./household_power_consumption.txt", header=TRUE, sep=";", na.strings = "?")
getwd()
setwd("/Users/grmcclure/OneDrive - Red Ventures/Documents/Projects/ExData_Plotting1/)
setwd("/Users/grmcclure/OneDrive - Red Ventures/Documents/Projects/ExData_Plotting1/")
setwd("/Users/grmcclure/OneDrive - Red Ventures/Documents/Projects/ExData_Plotting1/")
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", na.strings = "?")
##fix the date column
data$Date <- as.Date(data$Date, "%d/%m/%Y")
raw_data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", na.strings = "?")
##fix the date column
raw_data$Date <- as.Date(raw_data$Date, "%d/%m/%Y")
##get only the proper date range
data_correct_range <- subset(raw_data, Date %in% c("1/2/2007","2/2/2007"))
##get only the proper date range
data <- subset(data, Date %in% c("1/2/2007","2/2/2007"))
hist(data)
hist(data$Global_active_power)
hist(data$Global_active_power, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
##get only the proper date range
data <- subset(raw_data, Date %in% c("1/2/2007","2/2/2007"))
View(raw_data)
raw_data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", na.strings = "?")
##fix the date column
raw_data$Date <- as.Date(raw_data$Date, "%d/%m/%Y")
View(raw_data)
data <- subset(raw_data, Date %in% c("1/2/2007","2/2/2007"))
raw_data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", na.strings = "?")
data <- subset(raw_data, Date %in% c("1/2/2007","2/2/2007"))
##clean the date column
data$Date <- as.Date(data$Date, "%d/%m/%Y")
hist(data$Global_active_power, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
## Save file and close device
dev.copy(png,"plot1.png", width=480, height=480)
dev.off()
##add datetime
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
plot(data$Global_active_power~data$dateTime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
View(data)
plot(data$Global_active_power~data$DateTime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
##add datetime
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
plot(data$Global_active_power~data$DateTime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
plot(data$Global_active_power~data$Datetime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
## Save file, close device
dev.copy(png,"plot2.png", width=480, height=480)
dev.off()
dev.off()
plot(data$Global_active_power~data$Datetime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
## Save file, close device
dev.copy(png,"plot2.png", width=480, height=480)
dev.off()
##PRODUCE GRAPH
with(data, {
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## Save file, close device
dev.copy(png,"plot3.png", width=480, height=480)
dev.off()
##PRODUCE GRAPH
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
##PRODUCE GRAPH
?par
with(data, {
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
## Save file, close device
dev.copy(png,"plot4.png", width=480, height=480)
dev.off()
?legend
with(data, {
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
with(data, {
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
?legend
## Save file, close device
dev.copy(png,"plot4.png", width=480, height=480)
dev.off()
